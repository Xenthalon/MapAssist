name: Create release
on: workflow_dispatch

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release

jobs:
  build:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2

      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Restore NuGet packages
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: nuget restore ${{env.SOLUTION_FILE_PATH}}

      - name: Lookup deploy details
        uses: kanga333/variable-mapper@master
        with:
          key: "${{github.ref}}"
          map: |
            {
              "refs/heads/main": {
                "RELEASE_TAG": "stable"
              },
              "refs/heads/develop": {
                "RELEASE_TAG": "beta"
              }
            }

      - name: Set github run variables
        run: |
          sed -i 's/GITHUB_SHA/${{github.SHA}}/g' Program.cs
          sed -i "s/GITHUB_REPO/$(echo "${{github.REPOSITORY}}" | sed "s/\//\\\//g")/g" Program.cs
          sed -i 's/GITHUB_RELEASE_TAG/${{env.RELEASE_TAG}}/g' Program.cs

          sed -i -E 's/([0-9]+\.[0-9]+\.[0-9]+)\.0/\\1.${{github.RUN_NUMBER}}/g' Properties/AssemblyInfo.cs
          echo "RELEASE_VERSION=$(awk 'match($0, /[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+/) {print substr($0, RSTART, RLENGTH); exit }' Properties/AssemblyInfo.cs)" >> $env:GITHUB_ENV

      - name: Build
        # Add additional options to the MSBuild command line here (like platform or verbosity level).
        # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
        run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}} /p:DebugSymbols=false

      - name: Zip release
        uses: vimtor/action-zip@v1
        with:
          files: bin/x64/Release/ LICENSE README.md
          recursive: true
          dest: MapAssist.zip

      - name: Publish
        uses: "marvinpinto/action-automatic-releases@latest"
        if: ${{ env.RELEASE_TAG != '' }}
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: ${{env.RELEASE_TAG}}
          prerelease: false
          files: |
            LICENSE
            README.md
            MapAssist.zip

      - name: Update releases branch
        run: |
          git fetch origin
          git config user.name 'ItzRabbs'
          git config user.email '1294559+ItzRabbs@users.noreply.github.com'
          git reset --hard
          git clean -fd
          git checkout releases
          sed -i -E "s/<version>.+<\/version>/<version>$(echo "${{env.RELEASE_VERSION}}" | sed "s/\./\\\./g")<\/version>/g" ${{env.RELEASE_TAG}}.xml
          git add ${{env.RELEASE_TAG}}.xml
          git commit -m "Updated ${{env.RELEASE_TAG}} release version"
          git push